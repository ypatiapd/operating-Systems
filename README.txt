int numofargs[20]: καθολική μεταβλητή πινακας.Για κάθε εντολή 
περιέχει τον αριθμό των ορισμάτων της, χρειάζεται στην αναγνώριση 
των ανακατευθύνσεων.

Συνάρτηση main:

int exit_val: μεταβλητή κατάστασης εξόδου προγράμματος.Όταν 
παίρνει τιμή 1 σε interactive mode ή 2 σε batch mode το πρόγραμμα τερματίζει. 
char* commands[50]: πινακας συμβολοσειρών που αποθηκεύει τις εντολές (σε κάθε
θέση εντολή και ορίσματά της )
char* args:[20][20]: δυσδιάστατος πίνακας συμβολοσειρών που αποθηκεύει σε κάθε γραμμή 
την εντολή με τα ορίσματά της. Σε κάθε θέση αποθηκέυεται και ένα όρισμα. Στην πρώτη θέση της κάθε
γραμμής αποθηκεύεται η κύρια εντολή.
int counter1: μεταβλητή που αποθηκεύει τον αριθμό των εντολών που δόθηκαν από το χρήστη.
char* sivider: συμβολοσειρά που αποθηκεύει τον χαρακτήρα διαχωρισμόυ των εντολών.

//batch mode

int eof: μεταβλητή που παίρνει τιμή 0 αν φτάσουμε στο τέλος του αρχείου.
int line: μεταβλητή που αποθηκεύει τον αριθμό της γραμμής στο αρχείο που έχουμε φτάσει.
char buf* : buffer στον οποίο αποθηκεύεται η γραμμή που διαβάζουμε από το αρχείο. 

//interactive mode

char input[512]: πίνακας char που αποθηκεύει την είσοδο του χρήστη

Συνάρτηση read_file:

FILE *batchfile: ανοίγουμε το αρχείο batchfile για διάβασμα.
int file_out: μεταβλητή που αποθηκεύει τα δεδομένα της γραμμής που διαβάζονται από το αρχείο και τα
Μετά απο την file_out ,ένα ένα αποθηκεύονται στον buffer. 
int pre_out: μεταβλητή που αποθηκεύει το προηγούμενο δεδομένο γραμμής που διαβάστηκε. Χρησιμεύει 
στην αναγνώριση του τέλους του αρχείου,και της κάθε γραμμής, διότι πρίν το eof προηγoύνται 2 \n ,ενώ πριν το τέλος της γραμμής 1 /n.
int executed: μεταβήτή που αποθηκεύει τον αριθμό των γραμμών που έχουν ήδη εκτελεστεί έτσι ώστε όταν συγκριθεί με την line ,
μέχρι να πάρει την ίδια τιμή να μην αποθηκεύει τις γραμμές που έχουν διαβαστεί.
int file_count: μεταβλητή μετρητής θέσεων του buffer.Αυξάνεται κάθε φορά που προσθέτουμε δεδομένο στον buffer.
Αν pre_out =/n && file_out !=/n φτάσαμε στο τέλος της γραμμής οπότε με break φεύγουμε από το while 
και η συνάρτηση επιστρέφει και ξανακαλείται από τη main για την επόμενη γραμμή.
Στην τελευταία θέση του buffer προσθέτουμε /0΄.
Όταν pre_out και file_out πάρουν και οι 2 '/n' τιμή δεν γίνεται break από το while, 
οπότε η file out θα πάρει τιμή EOF και η συνάρτηση θα επιστρέψει 0, που σημαίνει τέλος του αρχείου.

Συνάρτηση parse_commands:

char* token: String που αποθηκεύει την τεμαχισμένη εντολή αφου υποστεί τροποποίηση από την strtok.
int counter: μετρητής εντολών που έχουν πληκτρολογιθεί. Αυξάνεται όσο η strtok !=NULL.
An div=" " ,έχουμε μόνο μια εντολή οπότε δεν χρειάζεται strtok. διαφορετικά strtok μέχρι να βρούμε null και 
επιστροφή του αριθμού των εντολών.

Συνάρτηση parse_args:

char *token: παρομοια με την parse_commands,τωρα αποθηκεύει τα ορίσματα των εντολών αφού
διαχωριστούν με strtok.

Αν η εντολή δεν έχει κενό σημαίνει πως δεν έχει ορίσματα,και αν συνδυαστικά υπάρχει μια μόνο εντολή,
τότε με strtok αφαιρείται μόνο το '\n' και ενημερώνεται ο πίνακας arg καταλλήλως. 
Διαφορετικά σε for loop, με μετρητή i όσες είναι οι εντολές, χωρίζεται με strtok κάθε εντολή από τα 
ορίσματά της, και αυτά μεταξύ τους και αποθηκεύονται στον πίνακα args.Στο τέλος κάθε γραμμής του args προστίθεται '/0'.

Συνάρτηση execute_comm:

int exitv: μεταβλητή που αποθηκεύει την κατάσταση εξόδου. Αν είναι 0 το πρόγραμμα τερματίζει.
char dir: μεταβλητή που αποθηκεύει τον χαρακτήρα ανακατέυθυνσης '>' ή '<'.
int check: μεταβλητή που ελέγχει αν υπάρχει ανακατεύθυνση στη συγκεκριμένη εντολή.
int status[count]: πίνακας των status των διεργασιών παιδιών.
int pid[count]: πίνακας των pids των διεργασιών.

Εξωτερικος έλεγχος if- else , ελέγχει τον χαρακτήρα διαχωρισμού και αν είναι ';' η "&&" δημιουργούνται με fork διεργασίες παιδιά που τις εκτελούν.
Αν είναι ' ' δημιουργείται μια διεργασια-παιδι και εκτελεί τη μοναδική εντολή.
Εσωτερικά και για τις 2 περιπτώσεις if kai else,  ελέγχεται αν στο πρώτο όρισμα υπάρχει χαρακτήρας ανακατεύθυνσης . Αν ναι η μεταβλητή check παίρνει τιμή 1
και καλείται η συνάρτηση redirection. Αν η μεταβλητή check =0, σημαίνει ότι δεν είχαμε ανακατεύθυνση
οπότε δημιουργείται διεργασία -παιδί από την execute_comm και εκτελεί την εντολή.

Συνάρτηση redirection:

Eξωτερικά  έλεχγος για τον χαρακτήρα ανακατεύθυνσης με if -else.Αν είναι '>',
με fork() δημιουργείται διεργασία-παιδί. Δημιουργείται δέικτης ptr και με fopen ανοίγουμε το επιθυμητό αρχείο για γράψιμο.
Με dup2 αλλάζουμε το stdout, έτσι ώστε να γίνεται στο αρχείο, και εκτελείται η εντολή . Επαναφέρουμε το stdout και κλέινουμε το αρχείο που ανοίξαμε. 
Παρόμοια διαδικασία αν ο χαρακτήρας είναι '<' ,με τη διαφορά ότι ανοίγουμε το αρχείο για διάβασμα και αλλάζουμε το stdin με αυτό του αρχείου. 
Επιστρέφεται η κατάσταση εξόδου. 

